if [ "$WHAT_TO_DO" == "-i" ] || [ "$WHAT_TO_DO" == "--install" ]; then
      _deploy_eg
      PORTAL_IP=$(echo $EG_NODE_MASTER_IPS|cut -d "," -f1)
    fi

    if [ "$WHAT_TO_DO" == "-i" ] || [ "$WHAT_TO_DO" == "--install" ]; then
      _deploy_controller
      PORTAL_IP=$(echo $EG_NODE_CONTROLLER_MASTER_IPS|cut -d "," -f1)
    fi


    if [ "$WHAT_TO_DO" == "-i" ] || [ "$WHAT_TO_DO" == "--install" ]; then
      _deploy_edge
      PORTAL_IP=$(echo $EG_NODE_EDGE_MASTER_IPS|cut -d "," -f1)
    fi

#########################################################
##################RIVATE_REGISTRY########################
if [[ $OFFLINE_MODE == "aio" ]]; then
    CHART_PREFIX="$TARBALL_PATH/helm/helm-charts/"
    CHART_SUFFIX="-1.0.1.tgz"
    PROM_CHART_SUFFIX="-9.3.1.tgz"
    GRAFANA_CHART_SUFFIX="-5.5.5.tgz"
    REGISTRY_URL=""
  else
    CHART_PREFIX=""
    CHART_SUFFIX=""
    PRIVATE_REGISTRY_IP=$(echo $EG_NODE_DEPLOY_IP|cut -d "," -f1)
    REGISTRY_URL="$PRIVATE_REGISTRY_IP:5000/"
  fi

#***********************************************************
#************This is for all********************************

    function _deploy_eg()
{
  password_less_ssh_check $EG_NODE_MASTER_IPS $EG_NODE_WORKER_IPS
  MASTER_IP=$(echo $EG_NODE_MASTER_IPS|cut -d "," -f1)
  setup_eg_ecosystem
  if [[ $OFFLINE_MODE == "muno" ]]; then
    make_remote_dir $MASTER_IP $EG_NODE_WORKER_IPS
  fi
  if [[ $SKIP_K8S != "true" ]]; then
     _deploy_k8s $EG_NODE_MASTER_IPS $EG_NODE_WORKER_IPS
  fi
  if [[ $OFFLINE_MODE == "muno" ]]; then
    mkdir -p $HOME/.kube
    scp root@$MASTER_IP:/root/.kube/config $HOME/.kube/
  fi
  configure_eg_ecosystem_on_remote $MASTER_IP $EG_NODE_WORKER_IPS
  _eg_deploy all $EG_NODE_DEPLOY_IP $MASTER_IP
}

#*******************************************************************
#***********************Deploy Controller***************************

function _deploy_controller()
{
  password_less_ssh_check $EG_NODE_CONTROLLER_MASTER_IPS $EG_NODE_CONTROLLER_WORKER_IPS
  MASTER_IP=$(echo $EG_NODE_CONTROLLER_MASTER_IPS|cut -d "," -f1)
  setup_eg_ecosystem
  if [[ $OFFLINE_MODE == "muno" ]]; then
    make_remote_dir $MASTER_IP $EG_NODE_CONTROLLER_WORKER_IPS
  fi
  if [[ $SKIP_K8S != "true" ]]; then
     _deploy_k8s $EG_NODE_CONTROLLER_MASTER_IPS $EG_NODE_CONTROLLER_WORKER_IPS
  fi
  if [[ $OFFLINE_MODE == "muno" ]]; then
    mkdir -p $HOME/.kube
    scp root@$MASTER_IP:/root/.kube/config $HOME/.kube/
  fi
  configure_eg_ecosystem_on_remote $MASTER_IP $EG_NODE_CONTROLLER_WORKER_IPS
  _eg_deploy controller $EG_NODE_DEPLOY_IP $MASTER_IP
}

#************************************************************************
#*************************Deploy edge************************************

function _deploy_edge()
{
  password_less_ssh_check $EG_NODE_EDGE_MASTER_IPS $EG_NODE_EDGE_WORKER_IPS
  MASTER_IP=$(echo $EG_NODE_EDGE_MASTER_IPS|cut -d "," -f1)
  setup_eg_ecosystem
  if [[ $OFFLINE_MODE == "muno" ]]; then
    make_remote_dir $MASTER_IP $EG_NODE_EDGE_WORKER_IPS
  fi
  if [[ $SKIP_K8S != "true" ]]; then
     _deploy_k8s $EG_NODE_EDGE_MASTER_IPS $EG_NODE_EDGE_WORKER_IPS
  fi
  if [[ $OFFLINE_MODE == "muno" ]]; then
    mkdir -p $HOME/.kube
    scp root@$MASTER_IP:/root/.kube/config $HOME/.kube/
  fi
  configure_eg_ecosystem_on_remote  $MASTER_IP $EG_NODE_EDGE_WORKER_IPS
  _eg_deploy edge $EG_NODE_DEPLOY_IP $MASTER_IP
}

#***************************************************************************
#*****************************_eg_deploy called by adge,controller,all******

function _eg_deploy()
{
  FEATURE=$1
  DEPLOY_NODE_IP=$2
  MASTER_IP=$3
  if [ $OFFLINE_MODE == "aio" ]; then
    install_EdgeGallery $FEATURE $DEPLOY_NODE_IP
  else
    install_EdgeGallery $FEATURE $MASTER_IP
  fi
}

#****************************************************************************
#*******************************Install adgegallery calling by _eg_deploy****


function install_EdgeGallery ()
{
  FEATURE=$1
  NODEIP=$2
  if [ -z "$DEPLOY_TYPE" ]; then
    DEPLOY_TYPE="nodePort"
  fi
  if [[ $FEATURE == 'edge' || $FEATURE == 'all' ]]; then
    install_mep
    install_mecm-mepm
    install_common-svc
  fi
  if [[ ($FEATURE == 'controller' || $FEATURE == 'all') && ($DEPLOY_TYPE == 'nodePort') ]]; then
    kubectl create secret generic edgegallery-ssl-secret \
    --from-file=keystore.p12=$PLATFORM_DIR/conf/keys/keystore.p12 \
    --from-literal=keystorePassword=te9Fmv%qaq \
    --from-literal=keystoreType=PKCS12 \
    --from-literal=keyAlias=edgegallery \
    --from-file=trust.cer=$PLATFORM_DIR/conf/keys/ca.crt \
    --from-file=server.cer=$PLATFORM_DIR/conf/keys/tls.crt \
    --from-file=server_key.pem=$PLATFORM_DIR/conf/keys/encryptedtls.key \
    --from-literal=cert_pwd=te9Fmv%qaq
    install_service-center
    install_user-mgmt
    install_mecm-meo
    install_mecm-fe
    #install_appstore
    #install_developer
  elif [[ ($FEATURE == 'controller' || $FEATURE == 'all') && ($DEPLOY_TYPE == 'ingress') ]]; then
    install_controller_with_ingress
  fi
}

#************************************************************************************
#***************************install_service-center***********************************

function install_service-center ()
{
  info "[Deploying ServiceCenter  ...]" $BLUE
  helm install service-center-edgegallery "$CHART_PREFIX"edgegallery/servicecenter"$CHART_SUFFIX"
                                                                                                 #--set images.repository="$REGISTRY_URL"edgegallery/service-center \
                                                                                                 # --set images.pullPolicy=IfNotPresent \
                                                                                                 # --set global.ssl.enabled=true \
                                                                                                 #--set global.ssl.secretName=edgegallery-ssl-secret
  if [ $? -eq 0 ]; then
    wait "service-center" 1
    info "[Deployed ServiceCenter  ....]" $GREEN
  else
    info "[ServiceCenter Deployment Failed]" $RED
    exit 1
  fi
}

#******************************************************************************************
#**************************************install_user-mgmt***********************************

function install_user-mgmt ()
{
  info "[Deploying UserMgmt  ........]" $BLUE

  ## Create a jwt secret for usermgmt
  kubectl create secret generic user-mgmt-jwt-secret \
    --from-file=publicKey=$PLATFORM_DIR/conf/keys/rsa_public_key.pem \
    --from-file=encryptedPrivateKey=$PLATFORM_DIR/conf/keys/encrypted_rsa_private_key.pem \
    --from-literal=encryptPassword=te9Fmv%qaq

  helm install user-mgmt-edgegallery "$CHART_PREFIX"edgegallery/usermgmt"$CHART_SUFFIX" \
                                                                                       #--set global.oauth2.clients.appstore.clientUrl=https://$NODEIP:$APPSTORE_PORT,\
                                                                                       #global.oauth2.clients.developer.clientUrl=https://$NODEIP:$DEVELOPER_PORT,\
                                                                                       #global.oauth2.clients.mecm.clientUrl=https://$NODEIP:$MECM_PORT, \
                                                                                       #--set jwt.secretName=user-mgmt-jwt-secret \
                                                                                       #--set images.usermgmt.repository="$REGISTRY_URL"edgegallery/user-mgmt \
                                                #--set images.postgres.repository="$REGISTRY_URL"postgres \
                                                #--set images.redis.repository="$REGISTRY_URL"redis \
                                                #--set images.initservicecenter.repository="$REGISTRY_URL"curlimages/curl \
                                                         #--set images.usermgmt.tag="$EG_IMAGE_TAG" \
                                         #--set images.usermgmt.pullPolicy=IfNotPresent \
#--set images.postgres.pullPolicy=IfNotPresent \
#--set images.redis.pullPolicy=IfNotPresent \
#--set images.initservicecenter.pullPolicy=IfNotPresent \
#--set global.ssl.enabled=true \
#--set global.ssl.secretName=edgegallery-ssl-secret

  if [ $? -eq 0 ]; then
    wait "user-mgmt-redis" 1
    wait "user-mgmt-postgres" 1
    wait "user-mgmt" 3
    info "[Deployed UserMgmt  .........]" $GREEN
  else
    info "[UserMgmt Deployment Failed .]" $RED
    exit 1
  fi
}

#**********************************************************************
#*************************install_mecm-meo*****************************

function install_mecm-meo ()
{
  info "[Deploying MECM-MEO  ........]" $BLUE
  ## Create a keystore secret
  kubectl create secret generic mecm-ssl-secret \
  --from-file=keystore.p12=$PLATFORM_DIR/conf/keys/keystore.p12 \
  --from-file=keystore.jks=$PLATFORM_DIR/conf/keys/keystore.jks \
  --from-literal=keystorePassword=te9Fmv%qaq \
  --from-literal=keystoreType=PKCS12 \
  --from-literal=keyAlias=edgegallery \
  --from-literal=truststorePassword=te9Fmv%qaq

  ## Create a mecm-meo secret with postgres_init.sql file to create necessary db's
  kubectl create secret generic edgegallery-mecm-secret \
    --from-file=postgres_init.sql=$PLATFORM_DIR/conf/keys/postgres_init.sql \
    --from-literal=postgresPassword=te9Fmv%qaq \
    --from-literal=postgresApmPassword=te9Fmv%qaq \
    --from-literal=postgresAppoPassword=te9Fmv%qaq \
    --from-literal=postgresInventoryPassword=te9Fmv%qaq \
    --from-literal=edgeRepoUserName=admin	 \
    --from-literal=edgeRepoPassword=admin123

  helm install mecm-meo-edgegallery "$CHART_PREFIX"edgegallery/mecm-meo"$CHART_SUFFIX"
                                                                                      #--set ssl.secretName=mecm-ssl-secret \
    #--set mecm.secretName=edgegallery-mecm-secret \
    #--set images.inventory.repository="$REGISTRY_URL"edgegallery/mecm-inventory \
                                                     #--set images.appo.repository="$REGISTRY_URL"edgegallery/mecm-appo \
                                                #--set images.apm.repository="$REGISTRY_URL"edgegallery/mecm-apm \
                                               #--set images.postgres.repository="$REGISTRY_URL"postgres \
                                                    #  --set images.inventory.tag="$EG_IMAGE_TAG" \
    
                                              #--set images.appo.tag="$EG_IMAGE_TAG" \
                                         # --set images.apm.tag="$EG_IMAGE_TAG" \
                                        # --set images.postgres.tag=12.3 \
    # --set images.inventory.pullPolicy=IfNotPresent \
    # --set images.appo.pullPolicy=IfNotPresent \
    # --set images.apm.pullPolicy=IfNotPresent \
    #--set images.postgres.pullPolicy=IfNotPresent
  if [ $? -eq 0 ]; then
    wait "mecm-inventory" 1
    wait "mecm-appo" 1
    wait "mecm-apm" 1
    wait "mecm-postgres" 1
    info "[Deployed MECM-MEO  .........]" $GREEN
  else
    info "[MECM-MEO Deployment Failed  ]" $RED
    exit 1
  fi
}


#************************************************************************************
#*******************************install_mecm-fe**************************************

function install_mecm-fe ()
{
  info "[Deploying MECM-FE  ........]" $BLUE

  helm install mecm-fe-edgegallery "$CHART_PREFIX"edgegallery/mecm-fe"$CHART_SUFFIX" 
                                                                                    # --set global.oauth2.authServerAddress=https://$NODEIP:$USER_MGMT \
    # --set images.mecmFe.repository="$REGISTRY_URL"edgegallery/mecm-fe \
                                                  #  --set images.initservicecenter.repository="$REGISTRY_URL"edgegallery/curl \
                                                             # --set images.mecmFe.tag="$EG_IMAGE_TAG" \
                                           # --set images.mecmFe.pullPolicy=IfNotPresent \
    # --set images.initservicecenter.pullPolicy=IfNotPresent \
    # --set global.ssl.enabled=true \
    # --set global.ssl.secretName=edgegallery-ssl-secret
  if [ $? -eq 0 ]; then
    wait "mecm-fe" 1
    info "[Deployed MECM-FE  ..........]" $GREEN
  else
    info "[MECM-FE Deployment Failed  .]" $RED
    exit 1
  fi
}

#***************************************************************************************
#*********************************Extra dependency required*****************************
function password_less_ssh_check() {
  if [[ $OFFLINE_MODE == "muno" ]]; then
    MASTER_IP=$(echo $1 |cut -d "," -f1)
    WORKER_LIST=`echo $2 | sed -e "s/,/ /g"`
    for node_ip in $MASTER_IP;
    do
      sshpass ssh -o PubkeyAuthentication=yes  -o PasswordAuthentication=no $node_ip "exit 0"
      if [[ $? != 0 ]]; then
        info "Error: PasswordLess SSH is not setup among hosts" $RED
        info "Set PasswordLess SSH by running: bash eg.sh -p master-ip,worker-ip1,..worker-ipn ROOT_PASSWORD" $RED
        exit 1
      fi
    done
    for node_ip in $WORKER_LIST;
    do
      sshpass ssh -o PubkeyAuthentication=yes  -o PasswordAuthentication=no $node_ip "exit 0"
      if [[ $? != 0 ]]; then
        info "Error: PasswordLess SSH is not setup among hosts" $RED
        info "Set PasswordLess SSH by running: bash eg.sh -p master-ip,worker-ip1,..worker-ipn ROOT_PASSWORD" $RED
        exit 1
      fi
    done
  fi
}

#***********************************************************************************************

function setup_eg_ecosystem()
{
  tar -xf $TARBALL_PATH/kubernetes_offline_installer.tar.gz -C $K8S_OFFLINE_DIR;
  export K8S_NODE_TYPE=WORKER; kubernetes_deploy;
  if [ "$OFFLINE_MODE" == "muno" ]; then
    _help_insecure_registry
    _load_and_run_docker_registry
  fi
  _load_swr_images_and_push_to_private_registry
  _help_install_helm_binary
  if [ "$OFFLINE_MODE" == "muno" ]; then
    _setup_helm_repo
  fi
}
#*************************************************************************************************

function make_remote_dir() {
    MASTER_IP=$(echo $1|cut -d "," -f1)
    WORKER_LIST=`echo $2 | sed -e "s/,/ /g"`
    sshpass ssh root@$MASTER_IP "mkdir -p /tmp/remote-platform/helm"
    for node_ip in $WORKER_LIST;
    do
      sshpass ssh root@$node_ip "mkdir -p /tmp/remote-platform/helm"
    done
}

#**************************************************************************************************

unction configure_eg_ecosystem_on_remote()
{
  MASTER_IP=$1
  WORKER_LIST=$2
  _setup_insecure_registry $MASTER_IP $WORKER_LIST
  for node_ip in $MASTER_IP;
  do
      sshpass ssh root@$node_ip \
      "helm repo remove edgegallery stable; helm repo add edgegallery http://${PRIVATE_REGISTRY_IP}:8080/edgegallery;
       helm repo add stable http://${PRIVATE_REGISTRY_IP}:8080/stable" < /dev/null
  done
}

#************************************************************************************
